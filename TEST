class tests extends uvm_test;
`uvm_component_utils(tests)

environment env;
sequences seq;

//write_seq wr_req;
//read_seq rd_req;
//simultaneous_seq smlt_req;
//idle_seq idl_req;

function new(string name, uvm_component parent);
super.new(name, parent);
endfunction
 
function void build_phase(uvm_phase phase);
super.build_phase(phase);
env = environment::type_id::create("env", this);
endfunction

virtual task run_phase(uvm_phase phase);
phase.raise_objection(this);

seq = sequences::type_id::create("seq");

//wr_req = write_seq::type_id::create("wr_req", this);
//rd_req = read_seq::type_id::create("rd_req", this);
//smlt_req = simultaneous_seq::type_id::create("smlt_req", this);
//idl_req = idle_seq::type_id::create("idl_req", this);

if(seq == null) 
begin
`uvm_error(get_type_name(), "Failed");
end 

else 
begin 
seq.start(env.agnt.sqr);

//wr_req.start(env.agnt.sqr);
//rd_req.start(env.agnt.sqr);
//smlt_req.start(env.agnt.sqr);
//idl_req.start(env.agnt.sqr);
end

phase.drop_objection(this);
endtask

virtual function void report_phase(uvm_phase phase);
uvm_report_server svr;
super.report_phase(phase);
svr = uvm_report_server::get_server();
if (svr.get_severity_count(UVM_FATAL) + svr.get_severity_count(UVM_ERROR) > 0) begin
`uvm_info(get_type_name(), "---------------------------------------", UVM_NONE)
`uvm_info(get_type_name(), "----            TEST FAIL          ----", UVM_NONE)
`uvm_info(get_type_name(), "---------------------------------------", UVM_NONE)
end else begin
`uvm_info(get_type_name(), "---------------------------------------", UVM_NONE)
`uvm_info(get_type_name(), "----           TEST PASS           ----", UVM_NONE)
`uvm_info(get_type_name(), "---------------------------------------", UVM_NONE)
end
endfunction


endclass
